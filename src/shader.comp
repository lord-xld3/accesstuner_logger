#version 450

#define FLT_MAX 3.402823466e+38
#define FLT_MIN 1.175494351e-38

const uint POPULATION_SIZE = 16;
const uint MAX_GENERATIONS = 8;
const float TOLERANCE = 0.1;
const float XOVER_RATE = 0.7;
const float MUTATION_RATE = 0.1;

layout(set = 0, binding = 0) readonly buffer XYBuffer {
    vec2 xy_data[];
};

layout(set = 0, binding = 1) buffer ResultBuffer {
    float opt_a;
    float opt_n;
};

// Random number generator
uint xorshift32(uint state) {
    uint x = state;
    x ^= x << 13;
    x ^= x >> 17;
    x ^= x << 5;
    return x;
}

void main() {
    // Initialize population
    vec2 population[POPULATION_SIZE];
    uint state = uint(gl_GlobalInvocationID.x); // Use thread ID as seed

    // Bounds for both parameters [min_a, max_a, min_n, max_n]
    vec4 bounds = vec4(FLT_MIN, FLT_MAX, FLT_MIN, FLT_MAX);

    // Randomize each parameter of population within bounds
    for (uint i = 0; i < POPULATION_SIZE; i++) {
        population[i].x = mix(bounds.x, bounds.y, float(xorshift32(state)) / float(0xFFFFFFFFu)); // Randomize a within bounds
        population[i].y = mix(bounds.z, bounds.w, float(xorshift32(state)) / float(0xFFFFFFFFu)); // Randomize n within bounds
        state = xorshift32(state); // Update seed for next parameter
    }

    // Return some population parameters to the result buffer for testing
    opt_a = population[0].x;
    opt_n = population[0].y;
}